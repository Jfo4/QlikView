Sub ExcelExport
  Dim aryExport(2,4) 'antal objekt -1, och alltid 4
  'obj 1
  aryExport(0,0) = "CH02"  'Objekt
  aryExport(0,1) = "Antal" 'Fliknamn i Excel
  aryExport(0,2) = "A2"    'Startcell för data
  aryExport(0,3) = "data"  'typ; data/image
  aryExport(0,4) = "A1"    'Startcell för objektrubrik
  'obj 2
  aryExport(1,0) = "CH01"
  aryExport(1,1) = "Placering"
  aryExport(1,2) = "A2"
  aryExport(1,3) = "data"
  aryExport(1,4) = "A1"
  'obj 3
  aryExport(2,0) = "CH03"
  aryExport(2,1) = "Antal"
  aryExport(2,2) = "G2"
  aryExport(2,3) = "image"
  aryExport(2,4) = "G1"
  Dim objExcelWorkbook 'as Excel.Workbook
  Set objExcelWorkbook = copyObjectsToExcelSheet(ActiveDocument, aryExport)
  objExcelWorkbook.WorkSheets("Antal").Columns("A:Z").AutoFit
'  objExcelWorkbook.Worksheets ("M1").Columns("A").ColumnWidth = 8
'  objExcelWorkbook.Worksheets ("M1").Columns("B:D").ColumnWidth = 14
'  objExcelWorkbook.Worksheets ("M1").Columns("A:D").WrapText = True
'  objExcelWorkbook.Worksheets ("M1").Columns("A:D").ShrinkToFit = True
'  objExcelWorkbook.Worksheets ("M1").Columns("G:R").Style = "Currency"
End Sub

Function copyObjectsToExcelSheet(qvDoc, aryExportDefinition) 'as Excel.Workbook
  Dim i, objExcelApp, objExcelDoc
  Set objExcelApp = CreateObject("Excel.Application")
  objExcelApp.Visible = true 'false if you want to hide Excel
  objExcelApp.DisplayAlerts = false
  Set objExcelDoc = objExcelApp.Workbooks.Add
  Dim strSourceObject, qvObjectId, sheetName, sheetRange, pasteMode, objSource, objCurrentSheet, objExcelSheet, sheetRangeCapt
  For i = 0 To Ubound(aryExportDefinition)
    qvObjectId = aryExportDefinition(i,0)
    sheetName = aryExportDefinition(i,1)
    sheetRange = aryExportDefinition(i,2)
    pasteMode = aryExportDefinition(i,3)
    sheetRangeCapt = aryExportDefinition(i,4)
    Set objExcelSheet = Excel_GetSheetByName(objExcelDoc, sheetName)
    If (objExcelSheet Is Nothing) Then
      Set objExcelSheet = Excel_AddSheet(objExcelApp, sheetName)
      If (objExcelSheet Is Nothing) Then
        MsgBox("No sheet could be created, this should not occur!!!")
      End If
    End If
    objExcelSheet.Select           
    Set objSource = qvDoc.GetSheetObject(qvObjectId)
    Call objSource.GetSheet().Activate()
    objSource.Maximize
    qvDoc.GetApplication.WaitForIdle
    If (Not objSource Is Nothing) Then
      If (pasteMode = "image") Then
        Call objSource.CopyBitmapToClipboard()
      Else
        Call objSource.CopyTableToClipboard(True) 'default & fallback
      End If
      Set objCurrentSheet = objExcelDoc.Sheets(sheetName)
      objExcelDoc.Sheets(sheetName).Range(sheetRange).Select
      objExcelDoc.Sheets(sheetName).Paste
      chartCaption = objSource.GetCaption.Name.v 
      objCurrentSheet.Range(sheetRangeCapt) = chartCaption 
      If (pasteMode <> "image") Then
        With objExcelApp.Selection
          .WrapText = False
          .ShrinkToFit = False
        End With                    
      End If       
      objCurrentSheet.Range("A1").Select   
    End If
  Next   
  Call Excel_DeleteBlankSheets(objExcelDoc)
  objExcelDoc.Sheets(1).Select 'Finally select the first sheet
  Set copyObjectsToExcelSheet = objExcelDoc 'Return value
End Function

' ****************************************************************
' Internal function for getting the Excel sheet by sheetName
' ****************************************************************
Function Excel_GetSheetByName(ByRef objExcelDoc, sheetName) 'as Excel.Sheet
  For Each ws In objExcelDoc.Worksheets
    If (Trim(ws.Name) = Excel_GetSafeSheetName(sheetName)) Then
      Set Excel_GetSheetByName = ws
      Exit Function
    End If
  Next
  Set Excel_GetSheetByName = Nothing 'default return value
End Function
 
Function Excel_GetSafeSheetName(sheetName)
  retVal = Trim(Left(sheetName, 31)) 'can be max 31 characters long
  Excel_GetSafeSheetName = retVal
End Function

' ****************************************************************
' Internal function for adding a new sheet
' ****************************************************************
Function Excel_AddSheet(objExcelApplication, sheetName) 'as Excel.Sheet
  objExcelApplication.Sheets.Add , objExcelApplication.Sheets(objExcelApplication.Sheets.Count) 'add a sheet to the last position
  Dim objNewSheet
  Set objNewSheet = objExcelApplication.Sheets(objExcelApplication.Sheets.Count)
  objNewSheet.Name = Left(sheetName,31)
  Set Excel_AddSheet = objNewSheet 'return the newly created sheet
End function
 
' ****************************************************************
' Delete all empty sheets
' ****************************************************************
Private Sub Excel_DeleteBlankSheets(ByRef objExcelDoc)
  For Each ws In objExcelDoc.Worksheets
    If (Not HasOtherObjects(ws)) Then
      If objExcelDoc.Application.WorksheetFunction.CountA(ws.Cells) = 0 Then
        On Error Resume Next
        Call ws.Delete()
      End If
    End If
  Next
End Sub
 
' ****************************************************************
' Helper function to determine if there are other objects placed
' on the sheet ...
' ****************************************************************
Function HasOtherObjects(ByRef objSheet) 'As Boolean
  Dim c
  If (objSheet.ChartObjects.Count > 0) Then
    HasOtherObjects = true
    Exit function
  End If
  If (objSheet.Pictures.Count > 0) Then
    HasOtherObjects = true
    Exit function
  End If
  If (objSheet.Shapes.Count > 0) Then
    HasOtherObjects = true
    Exit function
  End If
  HasOtherObjects = false
End Function
